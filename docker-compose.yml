version: '3.8'

networks:
  base:

services:
  # 1. 全局-nosql数据库mongodb
  myflag-mongo:
    image: ${IMAGE_MONGO}
    container_name: ${CONTAINER_MONGO}
    environment:
      MONGO_INITDB_ROOT_USERNAME: jason
      MONGO_INITDB_ROOT_PASSWORD: jason
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_MONGO}/db:/data/db
#      - $ROOT_PATH/data-server/${CONTAINER_MONGO}/conf:/data/configdb
#    command: --wiredTigerCacheSizeGB 3
    ports:
      - 27017:27017
    networks:
      base:

  #  2. 全局-关系型数据库mysql
  myflag-mysql:
    image: ${IMAGE_MYSQL}
    container_name: ${CONTAINER_MYSQL}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_MYSQL}/data:/var/lib/mysql
      - $ROOT_PATH/data-server/${CONTAINER_MYSQL}/conf:/etc/mysql/conf.d
      - $ROOT_PATH/data-server/${CONTAINER_MYSQL}/init:/docker-entrypoint-initdb.d/
    command:
      --lower_case_table_names=1
      --default-authentication-plugin=mysql_native_password
      --wait_timeout=2880000
      --max_allowed_packet=41943040
    environment:
      - MYSQL_ROOT_PASSWORD=xhmT1ThVUeAMegih
      - TZ=Asia/Shanghai
    ports:
      - 9906:3306
    networks:
      base:

  #  3. 全局-缓存 redis
  myflag-redis:
    image: ${IMAGE_REDIS}
    container_name: ${CONTAINER_REDIS}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_REDIS}/conf/redis.conf:/etc/redis/redis.conf:rw
      - $ROOT_PATH/data-server/${CONTAINER_REDIS}/data:/data:rw
    ports:
      - 6379:6379
    networks:
      base:
    command:
      redis-server /etc/redis/redis.conf --appendonly yes  --requirepass root

  # 4. java
  # 需要追加执行目录，无法在已有PATH之后追加，目前能想到的就是PATH重写
  # 若需要使用容器mysql，则 links中将mysql注释取消
  myflag-java:
    image: ${IMAGE_JAVA}
    container_name: ${CONTAINER_JAVA}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_JAVA}/app:/${CONTAINER_JAVA}/app:rw
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /usr/bin/docker:/usr/bin/docker
    ports:
      - 8081:8081
    links:
      - ${CONTAINER_REDIS}
#      - ${CONTAINER_MYSQL}
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/${CONTAINER_JAVA}/app/bin
    working_dir: /${CONTAINER_JAVA}/app
    networks:
      base:
    command:
#       /bin/bash -c "while true;do echo hello docker;sleep 1;done"
      java -jar app.jar --jeefree.profile=/${CONTAINER_JAVA}/app/userfile/ --spring.redis.host=${CONTAINER_REDIS} --spring.redis.port=6379 --spring.datasource.druid.master.url=jdbc:mysql://db地址:对应端口/jeefree?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8 --spring.datasource.druid.master.username=db用户名 --spring.datasource.druid.master.password=db密码

  # 5. nginx
  # 注意：volumes中的conf.d需要设置配置文件时再开放，配置文件可参考data-server中对应目录已提供的
  myflag-nginx:
    image: ${IMAGE_NGINX}
    container_name: ${CONTAINER_NGINX}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_NGINX}/conf.d:/etc/nginx/conf.d:rw
#            - $ROOT_PATH/data-server/${CONTAINER_NGINX}/conf:/etc/nginx/nginx.conf:rw
      - $ROOT_PATH/data-server/${CONTAINER_NGINX}/log:/var/log/nginx:rw
      - $ROOT_PATH/data-server/${CONTAINER_NGINX}/www:/usr/share/nginx/html:rw
    links:
      - ${CONTAINER_JAVA}
    ports:
      - 8082:80
      - 443:443
    networks:
      base:

  #  6. ipfs单节点
  myflag-ipfs:
    image: ${IMAGE_IPFS}
    container_name: ${CONTAINER_IPFS}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_IPFS}/export:/export:rw
      - $ROOT_PATH/data-server/${CONTAINER_IPFS}/data:/data/ipfs:rw
    ports:
      - 4001:4001
      - 5001:5001
      - 8081:8080
    networks:
      base:

  # 7. docker管理工具
  myflag-portainer:
    image: ${IMAGE_PORTAINER}
    container_name: ${CONTAINER_PORTAINER}
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $ROOT_PATH/data-server/${CONTAINER_PORTAINER}/data:/data
    networks:
      base:

  #  8. 消息队列
  # 4369 -- erlang发现口
  # 5672 -- client端通信口
  # 15672 -- 管理界面ui端口
  # 25672 -- server间内部通信口，集群之间
  myflag-mq:
    hostname: localhost
    container_name: ${CONTAINER_MQ}
    environment:
      RABBITMQ_DEFAULT_VHOST: "/test"
      RABBITMQ_DEFAULT_USER: "root"
      RABBITMQ_DEFAULT_PASS: "root"
    image: ${IMAGE_MQ}
    volumes:
#            windows下需要映射到当前windows用户的文件目录下，比如：C:\Users\${username}，未避免影响到开发，这里将该映射关闭，生产时，Linux下一定要开启
#            - $ROOT_PATH/data-server/${CONTAINER_MQ}/data:/var/lib/rabbitmq
      - $ROOT_PATH/data-server/${CONTAINER_MQ}/log:/var/log/rabbitmq/log
    ports:
      - 15672:15672
      - 4369:4369
      - 5672:5672
      - 25672:25672
    networks:
      base:
#    command:
#      - /bin/bash
#      - -c
#      - |
#        rabbitmq-plugins enable rabbitmq_management

  # 8. yapi接口管理工具，参考：https://github.com/fjc0k/docker-YApi#readme
  myflag-yapi:
    image: ${IMAGE_YAPI}
    container_name: ${CONTAINER_YAPI}
    environment:
      - YAPI_ADMIN_ACCOUNT=jason@163.com  # 登入账号
      - YAPI_ADMIN_PASSWORD=jason123                # 登入密码
      - YAPI_CLOSE_REGISTER=true                # 关闭注册功能
      - YAPI_DB_SERVERNAME=myflag-mongo              # mongodb 数据库地址
      - YAPI_DB_PORT=27017                      # mongodb 端口
      - YAPI_DB_DATABASE=yapi                   # mongodb 数据库名
      - YAPI_DB_USER=jason
      - YAPI_DB_PASS=jason
      - YAPI_DB_AUTH_SOURCE=admin
      - YAPI_MAIL_ENABLE=false                  # 不启用邮箱
      - YAPI_LDAP_LOGIN_ENABLE=false            # 不启用 loap 登入
      - YAPI_PLUGINS=[]                         # 插件
    ports:
      - 3000:3000
    depends_on:
      - ${CONTAINER_MONGO}
    networks:
      base:
