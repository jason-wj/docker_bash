version: '3.8'

networks:
  base:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${SUBNET}

services:
  # 1. 全局-nosql数据库mongodb
  myflag-mongo:
    image: ${IMAGE_MONGO}
    container_name: ${CONTAINER_MONGO}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_MONGO}/db:/data/db
      - $ROOT_PATH/data-server/${CONTAINER_MONGO}/conf:/data/configdb
    command: --wiredTigerCacheSizeGB 3
    ports:
      - 9091:27017
    networks:
      base:
        ipv4_address: ${CONTAINER_MONGO_IP}

#  2. 全局-关系型数据库mysql
  myflag-mysql:
    image: ${IMAGE_MYSQL}
    container_name: ${CONTAINER_MYSQL}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_MYSQL}/data:/var/lib/mysql
      - $ROOT_PATH/data-server/${CONTAINER_MYSQL}/conf:/etc/mysql/conf.d
      - $ROOT_PATH/data-server/${CONTAINER_MYSQL}/init:/docker-entrypoint-initdb.d/
    command:
      --lower_case_table_names=1
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - TZ=Asia/Shanghai
    ports:
      - 9906:3306
    networks:
      base:
        ipv4_address: ${CONTAINER_MYSQL_IP}

  #  3. 全局-缓存 redis
  myflag-redis:
    image: ${IMAGE_REDIS}
    container_name: ${CONTAINER_REDIS}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_REDIS}/conf/redis.conf:/etc/redis/redis.conf:rw
      - $ROOT_PATH/data-server/${CONTAINER_REDIS}/data:/data:rw
    ports:
      - 8890:6379
    networks:
      base:
        ipv4_address: ${CONTAINER_REDIS_IP}
    command:
      redis-server /etc/redis/redis.conf --appendonly yes  --requirepass 123456

  # 4. jeefree
  myflag-jeefree:
    image: ${IMAGE_JEEFREE}
    container_name: ${CONTAINER_JEEFREE}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_JEEFREE}/app:/app:rw
    ports:
      - 8081:8081
    working_dir: /app
    command:
#      /bin/bash -c "while true;do echo hello docker;sleep 1;done"
# 服务器
      java -jar app.jar --jeefree.profile=/app/userfile/ --spring.redis.host=172.20.0.4 --spring.redis.port=6379 --spring.datasource.druid.master.url=jdbc:mysql://172.17.0.16:9906/jeefree?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8 --spring.datasource.druid.master.username=jeefree --spring.datasource.druid.master.password=JXaWJ865HFL3B3hZ
# 本地
#      java -jar app.jar --jeefree.profile=/app/userfile/ --spring.redis.host=175.24.61.41 --spring.redis.port=8890 --spring.datasource.druid.master.url=jdbc:mysql://175.24.61.41:9906/jeefree?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8 --spring.datasource.druid.master.username=jeefree --spring.datasource.druid.master.password=JXaWJ865HFL3B3hZ
    networks:
      base:
        ipv4_address: ${CONTAINER_JEEFREE_IP}

  # 5. jeefree ui 后台管理页面
  # 注意：volumes中的conf.d需要设置配置文件时再开放，配置文件可参考data-server中对应目录已提供的
  myflag-jeefreeui:
    image: ${IMAGE_JEEFREEUI}
    container_name: ${CONTAINER_JEEFREEUI}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_JEEFREEUI}/conf.d:/etc/nginx/conf.d:rw
#      - $ROOT_PATH/data-server/${CONTAINER_JEEFREEUI}/conf:/etc/nginx/nginx.conf:rw
      - $ROOT_PATH/data-server/${CONTAINER_JEEFREEUI}/log:/var/log/nginx:rw
      - $ROOT_PATH/data-server/${CONTAINER_JEEFREEUI}/www:/usr/share/nginx/html:rw
    ports:
      - 8082:80
      - 443:443
    networks:
      base:
        ipv4_address: ${CONTAINER_JEEFREEUI_IP}

  #  6. ipfs单节点
  myflag-ipfs:
    image: ${IMAGE_IPFS}
    container_name: ${CONTAINER_IPFS}
    volumes:
      - $ROOT_PATH/data-server/${CONTAINER_IPFS}/export:/export:rw
      - $ROOT_PATH/data-server/${CONTAINER_IPFS}/data:/data/ipfs:rw
    ports:
      - 4001:4001
      - 5001:5001
      - 8081:8080
    networks:
      base:
        ipv4_address: ${CONTAINER_IPFS_IP}

  # 7. docker管理工具
  myflag-portainer:
    image: ${IMAGE_PORTAINER}
    container_name: ${CONTAINER_PORTAINER}
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $ROOT_PATH/data-server/${CONTAINER_PORTAINER}/data:/data
    networks:
      base:
        ipv4_address: ${CONTAINER_PORTAINER_IP}
    #  8. 消息队列
    # 4369 -- erlang发现口
    # 5672 -- client端通信口
    # 15672 -- 管理界面ui端口
    # 25672 -- server间内部通信口，集群之间
  myflag-mq:
    hostname: localhost
    container_name: ${CONTAINER_MQ}
    environment:
      RABBITMQ_DEFAULT_VHOST: "/test"
      RABBITMQ_DEFAULT_USER: "root"
      RABBITMQ_DEFAULT_PASS: "root"
    image: ${IMAGE_MQ}
    volumes:
#      windows下需要映射到当前windows用户的文件目录下，比如：C:\Users\${username}，未避免影响到开发，这里将该映射关闭，生产时，Linux下一定要开启
#      - $ROOT_PATH/data-server/${CONTAINER_MQ}/data:/var/lib/rabbitmq
      - $ROOT_PATH/data-server/${CONTAINER_MQ}/log:/var/log/rabbitmq/log
    ports:
      - 15672:15672
      - 4369:4369
      - 5672:5672
      - 25672:25672
    networks:
      base:
        ipv4_address: ${CONTAINER_MQ_IP}
#    command:
#      - /bin/bash
#      - -c
#      - |
#        rabbitmq-plugins enable rabbitmq_management


